"""
jobs registry
"""
load("//jobs/helpers/job.pinc", "NewJob")
load("//services/registry.pinc", svcs="reg")
load("re.star", "re")


def version(v):
    result = "v%d.%d.%d" % (v.major, v.minor, v.patch)
    if v.prerelease:
        result = result + "-" + v.prerelease
    return result


def generate_job_for_service(svc):
    """
    generate_job_for_service takes a defined service and creates a job for nomad to run it.

    Args:
        svc: a Service 
    Returns:
        a job
    """
    name = svc.name.lower()
    job = NewJob(name)
    artifact = svc.artifact.name if svc.artifact else svc.name.lower()

    for ver in svc.versions:
        v = version(ver.version)
        task = job.NewTask(name + "-" + v, v)
        task.SetImage("smintz/" + artifact + ":" + v)
        task.task.Env = {}
        for s in svc.downstreams:
            env_name = (
                re.sub("([a-z0-9])([A-Z])", "${1}_${2}", s.name).upper() + "_ADDR"
            )
            task.task.Env[env_name] = "envoy:10000"
        envoy = job.NewTask(name + "-envoy", v)
        envoy.SetImage("envoyproxy/envoy:v1.15.0")
        envoy.NewService(name + "-envoy", 10000)
        envoy.NewService(name + "-envoy-admin", 9901)
        # envoy.SetConfig("args", ["-c /local/envoy.yaml"])

    return job


def populate(reg):
    for s in svcs.services:
        reg.register_job(generate_job_for_service(s).job)
