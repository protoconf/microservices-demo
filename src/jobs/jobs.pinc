"""
jobs registry
"""
load("//jobs/helpers/job.pinc", "NewJob")
load("//services/registry.pinc", svcs="reg")
load("//jobs/protoconf_exec_task.pinc", "ProtoconfExecTask")
load("//nomad/v0.11.1/api.proto", "TaskArtifact")
load("re.star", "re")


def version(v):
    result = "v%d.%d.%d" % (v.major, v.minor, v.patch)
    if v.prerelease:
        result = result + "-" + v.prerelease
    return result


ENVOY_TEMPLATE = """\
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              path: "/dev/stdout"
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: local
          http_filters:
          - name: envoy.filters.http.router
            typed_config: {}
  clusters:
  - name: local
    connect_timeout: 0.250s
    type: strict_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: local
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "${NOMAD_IP_server_server}"
                port_value: ${NOMAD_PORT_server_server}

admin:
  access_log_path: "/tmp/admin_access.log"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8881
"""


def generate_job_for_service(svc):
    """
    generate_job_for_service takes a defined service and creates a job for nomad to run it.

    Args:
        svc: a Service 
    Returns:
        a job
    """
    name = svc.name.lower()
    job = NewJob(name)
    artifact = svc.artifact.name if svc.artifact else svc.name.lower()

    for ver in svc.versions:
        v = version(ver.version)
        job.SetCount(2, v)
        task = job.NewTask("server", v)
        task.SetImage("smintz/" + artifact + ":" + v)
        task.NewPort("server", to=18080)
        task.task.Resources.MemoryMB = 128
        task.task.Env = {
            "LISTEN_ADDR": "0.0.0.0",
            "PORT": "18080",
            "http_proxy": "${NOMAD_ADDR_envoy_forwarder}",
        }
        # for s in svc.downstreams:
        #     env_name = (
        #         re.sub("([a-z0-9])([A-Z])", "${1}_${2}", s.name).upper() + "_ADDR"
        #     )
        #     task.task.Env[env_name] = "${NOMAD_ADDR_envoy_forwarder}"
        envoy = job.NewTask("envoy", v)
        envoy.SetImage("envoyproxy/envoy:v1.15.0")
        envoy.NewService(
            name + "-envoy", 8881, tags=["envoy-admin"], label="envoyadmin"
        )
        envoy.NewService(name, 10000, label="ingress")
        envoy.NewPort("forwarder", 11000)
        envoy.task.Resources.CPU = 500
        envoy.SetConfig(
            "args",
            ["-c /alloc/data/%s.json" % svc.name, "--config-yaml", ENVOY_TEMPLATE],
        )
        exec = ProtoconfExecTask("services/routes/exec/" + svc.name)
        exec.Artifacts = [
            TaskArtifact(
                GetterSource="git::https://github.com/protoconf/microservices-demo//src",
                RelativeDest="/local",
                GetterOptions={"depth": "1"},
            )
        ]
        job.AddTask(exec, v)

    return job


def populate(reg):
    for s in svcs.services:
        reg.register_job(generate_job_for_service(s).job)
